import React, { useState, useEffect } from 'react';\nimport { stocksAPI } from '../services/api';\n\nconst StockCard = ({ stock, onClick }) => {\n  const [sparklineData, setSparklineData] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  // Load mini chart data\n  useEffect(() => {\n    const loadSparkline = async () => {\n      if (!stock.symbol) return;\n      \n      setLoading(true);\n      try {\n        const response = await stocksAPI.getStockHistory(stock.symbol, { range: '5D' });\n        if (response.data.success && response.data.data.length > 0) {\n          setSparklineData(response.data.data.map(item => item.close));\n        }\n      } catch (error) {\n        console.error('Error loading sparkline:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadSparkline();\n  }, [stock.symbol]);\n\n  // Create mini sparkline SVG\n  const createSparkline = (data) => {\n    if (data.length < 2) return null;\n    \n    const width = 100;\n    const height = 30;\n    const min = Math.min(...data);\n    const max = Math.max(...data);\n    const range = max - min || 1;\n    \n    const points = data.map((value, index) => {\n      const x = (index / (data.length - 1)) * width;\n      const y = height - ((value - min) / range) * height;\n      return `${x},${y}`;\n    }).join(' ');\n    \n    const color = stock.changePercent >= 0 ? '#10B981' : '#EF4444'; // green or red\n    \n    return (\n      <svg width={width} height={height} className=\"overflow-visible\">\n        <polyline\n          fill=\"none\"\n          stroke={color}\n          strokeWidth=\"1.5\"\n          points={points}\n        />\n      </svg>\n    );\n  };\n\n  const formatPrice = (price) => {\n    if (stock.exchange === 'NSE') {\n      return `₹${price.toLocaleString('en-IN', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;\n    }\n    return `$${price.toFixed(2)}`;\n  };\n\n  const formatChange = (change, percent) => {\n    const sign = change >= 0 ? '+' : '';\n    const currency = stock.exchange === 'NSE' ? '₹' : '$';\n    return `${sign}${currency}${Math.abs(change).toFixed(2)} (${sign}${percent.toFixed(2)}%)`;\n  };\n\n  const getChangeColor = () => {\n    if (stock.changePercent > 0) return 'text-green-600 bg-green-50';\n    if (stock.changePercent < 0) return 'text-red-600 bg-red-50';\n    return 'text-gray-600 bg-gray-50';\n  };\n\n  const getArrowIcon = () => {\n    if (stock.changePercent > 0) {\n      return (\n        <svg className=\"w-4 h-4 text-green-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M7 17L17 7M17 7H7M17 7V17\" />\n        </svg>\n      );\n    }\n    if (stock.changePercent < 0) {\n      return (\n        <svg className=\"w-4 h-4 text-red-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M17 17L7 7M7 7H17M7 7V17\" />\n        </svg>\n      );\n    }\n    return null;\n  };\n\n  return (\n    <div \n      className=\"bg-white rounded-lg border border-gray-200 p-6 hover:shadow-lg transition-all duration-200 cursor-pointer hover:border-blue-300\"\n      onClick={() => onClick && onClick(stock)}\n    >\n      {/* Header */}\n      <div className=\"flex items-start justify-between mb-4\">\n        <div>\n          <h3 className=\"font-semibold text-lg text-gray-900\">\n            {stock.symbol}\n          </h3>\n          <p className=\"text-sm text-gray-600 truncate max-w-[200px]\">\n            {stock.name}\n          </p>\n          <span className=\"inline-block px-2 py-1 text-xs bg-blue-100 text-blue-800 rounded-full mt-1\">\n            {stock.exchange}\n          </span>\n        </div>\n        <div className=\"text-right\">\n          <p className=\"text-xl font-bold text-gray-900\">\n            {formatPrice(stock.currentPrice)}\n          </p>\n          <div className={`flex items-center gap-1 px-2 py-1 rounded-full text-sm font-medium ${getChangeColor()}`}>\n            {getArrowIcon()}\n            {formatChange(stock.change, stock.changePercent)}\n          </div>\n        </div>\n      </div>\n\n      {/* Stock Info */}\n      <div className=\"grid grid-cols-2 gap-4 text-sm mb-4\">\n        <div>\n          <p className=\"text-gray-500\">Day High</p>\n          <p className=\"font-medium text-gray-900\">{formatPrice(stock.dayHigh)}</p>\n        </div>\n        <div>\n          <p className=\"text-gray-500\">Day Low</p>\n          <p className=\"font-medium text-gray-900\">{formatPrice(stock.dayLow)}</p>\n        </div>\n      </div>\n\n      {/* Mini Chart */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex-1\">\n          <p className=\"text-xs text-gray-500 mb-1\">5-Day Trend</p>\n          <div className=\"h-8\">\n            {loading ? (\n              <div className=\"animate-pulse bg-gray-200 h-full w-full rounded\"></div>\n            ) : sparklineData.length > 0 ? (\n              createSparkline(sparklineData)\n            ) : (\n              <div className=\"text-xs text-gray-400 flex items-center h-full\">\n                No chart data\n              </div>\n            )}\n          </div>\n        </div>\n        <div className=\"text-right ml-4\">\n          <div className=\"text-xs text-gray-500\">\n            {stock.sector}\n          </div>\n          <div className=\"text-xs text-gray-400 mt-1\">\n            {new Date(stock.lastUpdated).toLocaleTimeString('en-US', { \n              hour: '2-digit', \n              minute: '2-digit' \n            })}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default StockCard;
